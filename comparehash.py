import hashlib
import json
import bridge

class compare_hash:

    def __init__(path, original, check, version, filecount):
        path.original = original
        path.version = version
        path.check = check
        path.dict_original = None
        path.dict_check = None
        path.diff_list = []
        path.count = 0
        path.diff_count = 0
        path.filecount = filecount

    def print_header(path):
        print("")
        print("##############################################################################################################################################################")
        print("CHECKING FOR CONTENT DIFFERENCE, LOST AND EXTRA FILES!")
        print("##############################################################################################################################################################")

    #调用这个函数就好了
    #对比两个json是否一样#
    def compare(path):
        path.print_header()
        with open(path.original, "rb") as f:
            data1 = f.read()
            md5hash1 = hashlib.md5(data1).hexdigest()
        with open(path.check, "rb") as f:
            data2 = f.read()
            md5hash2 = hashlib.md5(data2).hexdigest()
        if (md5hash1==md5hash2):
            print("They are identical!")
            bridge.report_dict["相似度"] = str("100%")
        #若不一样则进行对比检测，首先先将json object转成dict格式#
        else:
            print("They are different!")
            print("")
            path.json2dict()

    #将json object转成dict格式后丢入check函数进行检测#
    def json2dict(path):
        json1 = open(path.original)
        data1 = json.load(json1)
        string1 = json.dumps(data1)
        dict1 = json.loads(string1)
        json2 = open(path.check)
        data2 = json.load(json2)
        string2 = json.dumps(data2)
        dict2 = json.loads(string2)
        path.dict_original = dict1
        path.dict_check = dict2
        path.hcheck()

    def hcheck(path):
        original = path.dict_original
        check = path.dict_check
        klist_original = list(original.keys())
        klist_check = list(check.keys())
        #文件缺失/多余文件，内容差异判定#
        bridge.report_dict["多余文件"] = []
        bridge.report_dict["缺少文件"] = []
        bridge.report_dict["内容差异"] = []
        for i in klist_original:
            if i not in klist_check:
                print("File Lost: ", i)
                path.diff_count += 1
                bridge.report_dict["缺少文件"].append(i)
        for i in klist_check:
            if i not in klist_original:
                print("Extra File: ", i)
                path.diff_count += 1
                bridge.report_dict["多余文件"].append(i)
            elif i in klist_original:
                if original[i] != check[i] :
                    print("Content difference in: ", i)
                    path.diff_count += 1
                    bridge.report_dict["内容差异"].append(i)
                    path.diff_list.append(i)
        bridge.report_dict["相似度"] = str(path.count_simperc()) + "%"
        print("")
        print(f"The given file as compared to Tensorflow {path.version} has a similarity of {path.count_simperc()} %")

    def count_simperc(path):
        return (round(((path.filecount - path.diff_count) / path.filecount), 6) * 100)

    def rdict(path):
        for i in path.diff_list:
            a = i.replace("\\", "/")
            path.diff_list[path.count] = a
            path.count += 1

        return path.diff_list