# by_diff_filename_v1.2
import os
import json

class MajorVersionIdentifier():
    def __init__(self, path1, path2):
        # path1 = 待测文件路径, path2 = 数据库路径("Diff_File.json")
        self.check_path = path1
        self.source_path = path2
        self.not_exist_file_count = {}
        self.major_final_version = ""

    # Function that read all path into a list
    def readPath(self, d, current_path=''):
        paths = []
        for key, value in d.items():
            if current_path:
                key_path = current_path + "\\" + key 
            else:
                key_path = key
        
            if isinstance(value, dict):
                nested_paths = self.readPath(value, key_path)
                paths.extend(nested_paths)
            else:
                paths.append(key_path)

        return paths

    # Function that return major patch
    def getMajorVersion(self, version):
        version_split = version.split(".")
        major_version = version_split[0] + "." + version_split[1]

        return major_version

    # 断代大版本
    def identifyMajorVersion(self):
        with open(self.source_path, "r") as f:
            data = json.load(f)
        
        # 开始计算各个JSON中不存在于待测文件里的数量
        # 数值越小，越有可能是JSON文件名中的后版本
        for key, value in data.items():
            path_list = self.readPath(value)
            not_exist_file = 0
            for path in path_list:
                if not os.path.exists(os.path.join(self.check_path, path)):
                    not_exist_file += 1

            # 得到大版本
            version2 = str.split(key, "__")[-1]
            major_version = self.getMajorVersion(version2)

            try:
                self.not_exist_file_count[major_version] += not_exist_file
            except KeyError:
                self.not_exist_file_count[major_version] = not_exist_file

        # 得出最终结果
        count_min = 142
        self.final_major_version = "0.5"
        for key, value in self.not_exist_file_count.items():
            if value < count_min:
                count_min = value
                self.final_major_version = key

        return self.final_major_version