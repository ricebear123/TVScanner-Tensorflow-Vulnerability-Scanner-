import os
import bridge

class VersionIdentifierPre():
    def __init__(self, path):
        self.path = path
        self.name = "version.h"
        self.filelist = []
        self.version = ""

    def print_header(self):
        print("")
        print("##############################################################################################################################################################")
        print("COMMENCING PRELIMINARY VERSION CHECK...")
        print("##############################################################################################################################################################")

    def find(self):
        self.print_header()
        for root, dirs, files in os.walk(self.path):
            if self.name in files:
                self.filelist.append(os.path.join(root, self.name))
        self.search4ver()

    def search4ver(self):
        word1 = "TF_MAJOR_VERSION"
        word2 = "TF_MINOR_VERSION"
        word3 = "TF_PATCH_VERSION"
        for i in self.filelist:
            with open(i, "r") as file:
                for line_number, line in enumerate(file, start=1):
                    if word1 in line:
                        ver_no = line[25]
                        if ver_no.isdigit():
                            self.version += ver_no
                            self.version += "."
                    if word2 in line:
                        ver_no = line[25]
                        if ver_no.isdigit():
                            self.version += ver_no
                            self.version += "."
                    if word3 in line:
                        ver_no = line[25]
                        if ver_no.isdigit():
                            self.version += ver_no

        print("Your version is supposed to be :")
        bridge.report_dict["是否和某个版本完全相符"] = "Yes"
        bridge.report_dict["推测基于某个版本得到的修改后源代码"] = str(self.version)
        print("Tensorflow", self.version)

    def returnResult(self):
        return self.version