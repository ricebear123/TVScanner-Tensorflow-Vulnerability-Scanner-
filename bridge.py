from hashcheck import hash_check
from version_identifier_pre import VersionIdentifierPre
from version_identifier_post import VersionIdentifierPost
from basicinfo import basic_info
import module
from comparehash import compare_hash
import json
from report import generate_report

report_dict = {}
report_dict["CVE"] = []

class run():
    def __init__(self,check_path,source_path):
        self.c_path = check_path
        self.s_path = source_path

    def runlib(self):
        a =  basic_info(self.c_path)
        a.show_info()

        b = VersionIdentifierPre(self.c_path)
        b.find()

        c = VersionIdentifierPost(self.c_path, "./dataset/Source_Code_File_Diff_With_Hash_CLUSTER", a.return_filecount())
        c.identifyVersion()
        if (b.returnResult() in c.returnResult()):
            print("Your version is : Tensorflow", (b.returnResult()))
            d = hash_check(self.c_path, b.returnResult())
            e = compare_hash(d.jump2check(), "./temp/hashcheck.json", b.returnResult(), a.return_filecount())
            e.compare()
            module.main(b.returnResult(), e.rdict())
        else:
            print("Although your version should be Tensorflow", b.returnResult(), ", but the file provided might be patched to the point where it is similar to Tensorflow", c.returnResult(), ",")
            print("We will commence a content check based on Tensorflow", c.returnResult())
            d = hash_check(self.c_path, c.returnResult())
            e = compare_hash(d.jump2check(), "./temp/hashcheck.json", c.returnResult(), a.return_filecount())
            e.compare()
            module.main(c.returnResult(), e.rdict())

        a = module.return_dict()
        report_dict["判断结果"] = a["判定结果"]
        out_file = open("./temp/report.json", "w")
        json.dump(report_dict, out_file, ensure_ascii=False, indent=6)
        out_file.close()
        f = generate_report("./temp/report.json")
        f.generate()
        print("REPORT GENERATED!")
